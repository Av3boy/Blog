@inject IBlogCache _blogCache

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">Blog</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass nav-scrollable" @onclick="ToggleNavMenu">
    <nav class="flex-column">

        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>

        @foreach (var blog in _blogs)
        {
            <NavMenuItem Title="@blog.Title" Link="@blog.URL" />
        }

    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private bool _isLoading = true;

    private IEnumerable<BlogDto> _blogs { get; set; } = Enumerable.Empty<BlogDto>();

    protected override Task OnInitializedAsync()
    {
        _blogs = _blogCache.GetAllBlogs().ToList();

        return base.OnInitializedAsync();
    }
}
