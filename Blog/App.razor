@inject IBlogCache _blogCache

@using System.Reflection

@if (_loading)
{
    <p>Loading...</p>
    return;
}

<Router AppAssembly="@typeof(App).Assembly">

    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>

    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>

</Router>

@code {
    private const string _blogNamespace = "Blog.Blogs.Components";
    private string _configPath = Path.Combine(Environment.CurrentDirectory, @"Blogs\config.json");

    private bool _loading { get; set; } = true;

    /// <inheritdoc />
    protected override async Task OnInitializedAsync()
    {
        // Get all types in the assembly
        List<Type> types = Assembly.GetExecutingAssembly().GetTypes().ToList();
        var blogs = types.Where(t => t.Namespace == _blogNamespace).ToList();

        // Get blog details from json.
        using System.IO.FileStream reader = File.OpenRead(_configPath);
        List<BlogDto> config = (await System.Text.Json.JsonSerializer.DeserializeAsync<List<BlogDto>>(reader))!;

        blogs.ForEach(blog =>
        {
            string blogURL = GetBlogURL(blog.Name);

            BlogDto? blogInfo = config.FirstOrDefault(i => i.URL.Equals(blogURL));
            if (blogInfo is null)
                throw new InvalidOperationException($"A blog with {blogURL} could not be found." +
                                                     "Make sure the url of the blog is correct in the config.json.");

            blogInfo!.BlogContentComponentType = blog;

            _blogCache.SetItem(blogURL, blogInfo);
        });

        _loading = false;
    }

    string GetBlogURL(string blogTypeName)
    {
        // Allocate the lenght of the name + the new hyphens to be added before the capital letters
        StringBuilder builder = new StringBuilder(blogTypeName.Length + blogTypeName.Count(char.IsUpper));

        foreach (char currentChar in blogTypeName)
        {
            if (char.IsUpper(currentChar))
            {
                if (builder.Length > 0 && builder[builder.Length - 1] != '-')
                    builder.Append('-');

                builder.Append(char.ToLower(currentChar));
            }
            else
                builder.Append(currentChar);
        }

        return builder.ToString();
    }
}